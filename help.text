
# React Native Project Folder Structure Documentation

## root/
### src/
- **assets/**: Stores static resources like images, fonts, and icons used throughout the app.
  - **images/**: Contains static images (e.g., app logos, banners, placeholders).
    - Example: Profile picture placeholder for a dating app.
  - **fonts/**: Stores custom fonts for consistent typography.
    - Example: Using branded fonts in an e-commerce app.
  - **icons/**: Contains reusable icons (e.g., SVG or PNG).
    - Example: Icons for navigation tabs in a fitness tracker app.

- **components/**: Reusable UI components to standardize design and reduce duplication.
  - **Button.js**: A customizable button used across screens.
    - Example: A "Submit" button for a form in a ticket booking app.

- **screens/**: Defines individual screens for app navigation.
  - **HomeScreen.js**: Represents the main landing screen of the app.
    - Example: A feed displaying recipes in a cooking app.
  - **ProfileScreen.js**: Displays user details, preferences, and activity.
    - Example: Showing workout history in a fitness app.
  - **SettingsScreen.js**: Contains app preferences and settings options.
    - Example: Toggle dark mode in a chat app.

- **navigation/**: Configures app navigation (stack, tab, drawer).
  - **AppNavigator.js**: Centralizes navigation routes and initializes the navigation container.
    - Example: Routing from login to dashboard in a banking app.
  - **TabNavigator.js**: Sets up bottom tab navigation between screens.
    - Example: Switching between "Home," "Explore," and "Profile" tabs in a streaming app.

- **redux/**: Manages global state using Redux for complex data flows.
  - **store.js**: Configures the Redux store to combine reducers and enable middleware.
    - Example: Managing state for multiple user profiles in a subscription app.
  - **slices/**: Contains feature-based Redux slices.
    - **userSlice.js**: Handles user-specific state like authentication and preferences.
      - Example: Saving a user's login token in a ride-hailing app.
    - **themeSlice.js**: Manages app-wide themes like light and dark modes.
      - Example: Switching themes in a news app.

- **hooks/**: Custom hooks for encapsulating reusable logic.
  - **useAuth.js**: Handles authentication logic like login, logout, and token validation.
    - Example: Ensures users stay logged in after reopening a learning app.

- **context/**: Provides lightweight state management using React Context API.
  - **AuthContext.js**: Provides global authentication state without Redux.
    - Example: Sharing user session data in a remote work management app.

- **utils/**: Stores helper functions for repetitive tasks.
  - **apiUtils.js**: Centralizes API configurations like base URLs and request interceptors.
    - Example: Setting secure headers for API calls in a fintech app.
  - **formatDate.js**: Formats dates into readable formats.
    - Example: Displaying "Last updated: Nov 25" in a calendar app.

- **services/**: Manages external API calls and integrations.
  - **apiClient.js**: Creates a pre-configured Axios instance for API requests.
    - Example: Centralizing API calls for an expense tracking app.
  - **userService.js**: Encapsulates user-related API calls.
    - Example: Fetching saved playlists in a music app.

- **config/**: Stores environment-specific configurations.
  - **config.js**: Centralizes app-wide configuration variables.
    - Example: Setting the base API URL for a real estate app.

- **styles/**: Stores global styles for colors, spacing, and typography.
  - **colors.js**: Defines color variables for theming.
    - Example: Primary and secondary colors for a banking app.
  - **spacing.js**: Defines consistent spacing values for margins and padding.
    - Example: Ensuring uniform spacing in a productivity app.

- **i18n/**: Stores localization files for multi-language support.
  - **en.json**: Contains English language strings.
    - Example: English translation for a fitness app's buttons and labels.
  - **es.json**: Contains Spanish language strings.
    - Example: Spanish translation for a multilingual recipe app.

- **constants/**: Stores constants used across the app.
  - **apiEndpoints.js**: Defines API endpoint URLs for easier updates.
    - Example: Separate endpoints for user and product APIs in an online marketplace.

- **App.js**: The main entry point that initializes the app.
  - Example: Wrapping navigation, themes, and state providers in a social app.

### root/
- **tests/**: Contains unit and integration tests for app reliability.
  - Example: Testing login functionality in a to-do list app.

- **e2e/**: End-to-end testing for user flows.
  - Example: Testing checkout functionality in an e-commerce app.

- **docs/**: Stores documentation for setup and contributions.
  - Example: Onboarding guide for developers in a healthcare app.

- **.eslintrc.js**: Configures ESLint for linting JavaScript code.
  - Example: Enforcing consistent coding standards in a finance app.

- **.prettierrc**: Configures Prettier for code formatting.
  - Example: Automatically formatting code in a chat app.

- **babel.config.js**: Babel configuration for transpiling JavaScript.
  - Example: Adding support for modern JavaScript in an IoT app.

- **package.json**: Manages dependencies and project metadata.
  - Example: Installing `react-native-paper` for UI in a restaurant app.

- **README.md**: Project documentation for setup and usage.
  - Example: Instructions for setting up a freelance management app.

- **.env**: Stores sensitive environment variables like API keys.
  - Example: Hiding API keys for secure API calls in a food delivery app.
